{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\youtube_project\\\\client\\\\src\\\\components\\\\views\\\\DetailVideoPage\\\\DetailVideoPage.js\";\nimport React, { useEffect, useState } from 'react';\nimport { List, Avatar, Row, Col } from 'antd';\nimport axios from 'axios';\nimport SideVideo from './Sections/SideVideo';\nimport Subscriber from './Sections/Subscriber';\nimport Comments from './Sections/Comments';\nimport LikeDislikes from './Sections/LikeDislikes';\n\nfunction DetailVideoPage(props) {\n  const videoId = props.match.params.videoId; //해당페이지의 비디오 ID가져오기 (/video/:videoId의 URL해당 페이지의 URL에서 :videoId 자리에 들어가는 값)\n\n  const [Video, setVideo] = useState([]);\n  const [CommentLists, setCommentLists] = useState([]);\n  const videoVariable = {\n    videoId: videoId\n  }; //비디오 ID값\n  //비디오 정보 가져오기\n\n  useEffect(() => {\n    //컴포넌트가 렌더링된 이후 특정 동작을 수행\n    axios.post('/api/video/getVideoDetail', videoVariable) //videoVariable에 담긴 videoId 값을 가지고 해당 비디오의 정보를 가져옴\n    .then(response => {\n      if (response.data.success) {\n        //요청 성공시\n        console.log(response.data.video);\n        setVideo(response.data.video); // video state 값을 해당 비디오 정보로 업데이트\n      } else {\n        //실패시\n        alert('비디오 정보 가져오기를 실패했습니다');\n      }\n    });\n    axios.post('/api/comment/getComments', videoVariable).then(response => {\n      if (response.data.success) {\n        console.log('response.data.comments', response.data.comments);\n        setCommentLists(response.data.comments);\n      } else {\n        alert('댓글 정보 가져오기를 실패했습니다');\n      }\n    });\n  }, []);\n\n  const updateComment = newComment => {\n    setCommentLists(CommentLists.concat(newComment));\n  };\n\n  if (Video.writer) {\n    //이미지 정보를 가져오기전에 DetailVideoPage이 먼저 렌더링되면 에러가뜨니까 Video.writer가 있을 경우에만 랜더링\n    const SubscribeButton = Video.writer._id !== localStorage.getItem('userId') && /*#__PURE__*/React.createElement(Subscriber, {\n      userTo: Video.writer._id,\n      userFrom: localStorage.getItem('userId'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 88\n      }\n    });\n    return /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, \" \", /*#__PURE__*/React.createElement(Col, {\n      lg: 18,\n      xs: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"postPage\",\n      style: {\n        width: '100%',\n        padding: '3rem 4em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      style: {\n        width: '100%'\n      },\n      src: `http://localhost:5000/${Video.filePath}`,\n      controls: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    }), \" \", /*#__PURE__*/React.createElement(List.Item, {\n      actions: [/*#__PURE__*/React.createElement(LikeDislikes, {\n        video: true,\n        videoId: videoId,\n        userId: localStorage.getItem('userId'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 39\n        }\n      }), //좋아요\n      SubscribeButton],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(List.Item.Meta, {\n      avatar: /*#__PURE__*/React.createElement(Avatar, {\n        src: Video.writer && Video.writer.image,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 41\n        }\n      }) //유저 이미지\n      ,\n      title: Video.title //제목\n      ,\n      description: Video.description //내용\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Comments, {\n      CommentLists: CommentLists,\n      postId: Video._id,\n      refreshFunction: updateComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 25\n      }\n    }), \" \")), /*#__PURE__*/React.createElement(Col, {\n      lg: 6,\n      xs: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(SideVideo, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }\n    })));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, \"\\uB85C\\uB529\\uC911....\");\n  }\n}\n\nexport default DetailVideoPage;","map":{"version":3,"sources":["C:/Users/user/Desktop/youtube_project/client/src/components/views/DetailVideoPage/DetailVideoPage.js"],"names":["React","useEffect","useState","List","Avatar","Row","Col","axios","SideVideo","Subscriber","Comments","LikeDislikes","DetailVideoPage","props","videoId","match","params","Video","setVideo","CommentLists","setCommentLists","videoVariable","post","then","response","data","success","console","log","video","alert","comments","updateComment","newComment","concat","writer","SubscribeButton","_id","localStorage","getItem","width","padding","filePath","image","title","description"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { List, Avatar, Row, Col } from 'antd';\r\nimport axios from 'axios';\r\n\r\nimport SideVideo from './Sections/SideVideo';\r\nimport Subscriber from './Sections/Subscriber';\r\nimport Comments from './Sections/Comments'\r\nimport LikeDislikes from './Sections/LikeDislikes';\r\n\r\nfunction DetailVideoPage(props) {\r\n\r\n\r\n    const videoId = props.match.params.videoId //해당페이지의 비디오 ID가져오기 (/video/:videoId의 URL해당 페이지의 URL에서 :videoId 자리에 들어가는 값)\r\n    const [Video, setVideo] = useState([])\r\n    const [CommentLists, setCommentLists] = useState([])\r\n\r\n    const videoVariable = {videoId: videoId} //비디오 ID값\r\n\r\n\r\n    //비디오 정보 가져오기\r\n    useEffect(() => { //컴포넌트가 렌더링된 이후 특정 동작을 수행\r\n        axios.post('/api/video/getVideoDetail', videoVariable) //videoVariable에 담긴 videoId 값을 가지고 해당 비디오의 정보를 가져옴\r\n            .then(response => {\r\n                if (response.data.success) { //요청 성공시\r\n                    console.log(response.data.video)\r\n                    setVideo(response.data.video)// video state 값을 해당 비디오 정보로 업데이트\r\n                } else { //실패시\r\n                    alert('비디오 정보 가져오기를 실패했습니다')\r\n                }\r\n            })\r\n\r\n        axios.post('/api/comment/getComments', videoVariable)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    console.log('response.data.comments',response.data.comments)\r\n                    setCommentLists(response.data.comments)\r\n                } else {\r\n                    alert('댓글 정보 가져오기를 실패했습니다')\r\n                }\r\n            })\r\n\r\n\r\n    }, [])\r\n\r\n    const updateComment = (newComment) => {\r\n        setCommentLists(CommentLists.concat(newComment))\r\n    } \r\n\r\n\r\n    if (Video.writer) { //이미지 정보를 가져오기전에 DetailVideoPage이 먼저 렌더링되면 에러가뜨니까 Video.writer가 있을 경우에만 랜더링\r\n       const SubscribeButton =  Video.writer._id !== localStorage.getItem('userId') && <Subscriber userTo={Video.writer._id} userFrom={localStorage.getItem('userId')} />\r\n       \r\n       return ( \r\n            <Row> {/*  Ant Design 그리드 방식*/}\r\n                <Col lg={18} xs={24}> {/*반응형 사이즈 조절 */}\r\n                    <div className=\"postPage\" style={{ width: '100%', padding: '3rem 4em' }}>\r\n                        <video style={{ width: '100%' }} src={`http://localhost:5000/${Video.filePath}`} controls></video> {/* 비디오 서버포트 5000/Video모델의 filePath 속성의 경로*/}\r\n\r\n                        <List.Item\r\n                            actions={[<LikeDislikes video videoId={videoId} userId={localStorage.getItem('userId')}  />, //좋아요\r\n                            SubscribeButton]} \r\n                        >\r\n                            <List.Item.Meta\r\n                                avatar={<Avatar src={Video.writer && Video.writer.image} />} //유저 이미지\r\n                                title={Video.title}//제목\r\n                                description={Video.description}  //내용\r\n                            />\r\n                            <div></div>\r\n                        </List.Item>\r\n\r\n                        <Comments CommentLists={CommentLists} postId={Video._id} refreshFunction={updateComment} /> {/* 댓글리스트*/}\r\n\r\n                    </div>\r\n                </Col>\r\n                <Col lg={6} xs={24}> {/* 사이드쪽 비디오 목록 반응형 사이즈 조절 */}\r\n\r\n                    <SideVideo />\r\n\r\n                </Col>\r\n            </Row>\r\n        )\r\n\r\n    } else {\r\n        return (\r\n            <div>로딩중....</div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default DetailVideoPage\r\n\r\n"]},"metadata":{},"sourceType":"module"}