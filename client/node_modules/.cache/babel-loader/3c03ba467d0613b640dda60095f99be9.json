{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\youtube_project\\\\client\\\\src\\\\components\\\\views\\\\DetailVideoPage\\\\Sections\\\\Subscriber.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nfunction Subscriber(props) {\n  const userTo = props.userTo;\n  const userFrom = props.userFrom;\n  const [SubscribeNumber, setSubscribeNumber] = useState(0); //구독자수는 0부터시작\n\n  const [Subscribed, setSubscribed] = useState(false); //기본값 false\n\n  const onSubscribe = () => {\n    let subscribeVariables = {\n      userTo: userTo,\n      //디테일 비디오 페이지에서 props로 받음\n      userFrom: userFrom //디테일 비디오 페이지에서 props로 받음\n\n    };\n\n    if (Subscribed) {\n      //이미 구독중이라면\n      axios.post('/api/subscribe/unSubscribe', subscribeVariables) //구독취소 요청 보내기\n      .then(response => {\n        //서버에서 응답\n        if (response.data.success) {\n          //응답성공시\n          setSubscribeNumber(SubscribeNumber - 1); //구독취소하는 것이니 기존 SubscribeNumber에 -1\n\n          setSubscribed(!Subscribed); // 현재 구독상태를 반대로 변경(구독 중인 상태에서 구독 취소를 하면 Subscribed를 false로 변경)\n        } else {\n          //응답 실패시\n          alert('구독취소를 실패 했습니다');\n        }\n      });\n    } else {\n      // 아직 구독중이 아니라면\n      axios.post('/api/subscribe/subscribe', subscribeVariables) //구독 요청 보내기\n      .then(response => {\n        //서버에서 응답\n        if (response.data.success) {\n          //응답성공시\n          setSubscribeNumber(SubscribeNumber + 1); //구독을 하는 것이니 기존 SubscribeNumber에 +1\n\n          setSubscribed(!Subscribed); // 현재 구독상태를 반대로 변경(구독 중이지 않은 상태에서 구독을 하면 Subscribed를 true로 변경)\n        } else {\n          //응답 실패시\n          alert('구독을 실패 했습니다');\n        }\n      });\n    }\n  }; //DB에서 구독정보 가져오기\n\n\n  useEffect(() => {\n    //컴포넌트가 렌더링된 이후 특정 동작을 수행\n    const subscribeNumberVariables = {\n      userTo: userTo,\n      userFrom: userFrom\n    }; //디테일 비디오페이지에서 props로 받음\n\n    axios.post('/api/subscribe/subscribeNumber', subscribeNumberVariables) //서버로 요청하여 구독자 수를 가져오기\n    .then(response => {\n      //서버에서 응답\n      if (response.data.success) {\n        //응답 성공시\n        setSubscribeNumber(response.data.subscribeNumber); //SubscribeNumber의 값이 구독자 수로 업데이트\n      } else {\n        //응답 실패시\n        alert('구독자 수 정보를 받아오지 못했습니다');\n      }\n    });\n    axios.post('/api/subscribe/subscribed', subscribeNumberVariables) //서버로 요청하여 구독여부 확인하기\n    .then(response => {\n      //서버에서 응답\n      if (response.data.success) {\n        //응답 성공시\n        setSubscribed(response.data.subcribed); // Subscribed 값이 구독여부(true/false)에 따라 업데이트\n      } else {\n        //응답 실패시\n        alert('구독정보를 받아오지 못했습니다');\n      }\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onSubscribe,\n    style: {\n      backgroundColor: `${Subscribed ? '#AAAAAA' : '#CC0000'}`,\n      //구독을 하고있을때의 색:#AAAAAA 안하고있을때의 색:#CC0000\n      borderRadius: '4px',\n      color: 'white',\n      padding: '10px 16px',\n      fontWeight: '500',\n      fontSize: '1rem',\n      textTransform: 'uppercase'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, SubscribeNumber, \" \", Subscribed ? 'Subscribed' : 'Subscribe', \" \"));\n}\n\nexport default Subscriber;","map":{"version":3,"sources":["C:/Users/user/Desktop/youtube_project/client/src/components/views/DetailVideoPage/Sections/Subscriber.js"],"names":["React","useEffect","useState","axios","Subscriber","props","userTo","userFrom","SubscribeNumber","setSubscribeNumber","Subscribed","setSubscribed","onSubscribe","subscribeVariables","post","then","response","data","success","alert","subscribeNumberVariables","subscribeNumber","subcribed","backgroundColor","borderRadius","color","padding","fontWeight","fontSize","textTransform"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\n\r\nfunction Subscriber(props) {\r\n    const userTo = props.userTo\r\n    const userFrom = props.userFrom\r\n\r\n    const [SubscribeNumber, setSubscribeNumber] = useState(0) //구독자수는 0부터시작\r\n    const [Subscribed, setSubscribed] = useState(false) //기본값 false\r\n\r\n    const onSubscribe = ( ) => {\r\n\r\n        let subscribeVariables = {\r\n                userTo : userTo, //디테일 비디오 페이지에서 props로 받음\r\n                userFrom : userFrom//디테일 비디오 페이지에서 props로 받음\r\n        }\r\n\r\n        if(Subscribed) {\r\n            //이미 구독중이라면\r\n            axios.post('/api/subscribe/unSubscribe', subscribeVariables) //구독취소 요청 보내기\r\n                .then(response => { //서버에서 응답\r\n                    if(response.data.success){  //응답성공시\r\n                        setSubscribeNumber(SubscribeNumber - 1) //구독취소하는 것이니 기존 SubscribeNumber에 -1\r\n                        setSubscribed(!Subscribed) // 현재 구독상태를 반대로 변경(구독 중인 상태에서 구독 취소를 하면 Subscribed를 false로 변경)\r\n                    } else { //응답 실패시\r\n                        alert('구독취소를 실패 했습니다')\r\n                    }\r\n                })\r\n\r\n        } else {\r\n            // 아직 구독중이 아니라면\r\n            axios.post('/api/subscribe/subscribe', subscribeVariables) //구독 요청 보내기\r\n                .then(response => { //서버에서 응답\r\n                    if(response.data.success) { //응답성공시\r\n                        setSubscribeNumber(SubscribeNumber + 1) //구독을 하는 것이니 기존 SubscribeNumber에 +1\r\n                        setSubscribed(!Subscribed) // 현재 구독상태를 반대로 변경(구독 중이지 않은 상태에서 구독을 하면 Subscribed를 true로 변경)\r\n                    } else { //응답 실패시\r\n                        alert('구독을 실패 했습니다')\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    //DB에서 구독정보 가져오기\r\n    useEffect(() => { //컴포넌트가 렌더링된 이후 특정 동작을 수행\r\n\r\n        const subscribeNumberVariables = { userTo: userTo, userFrom: userFrom } //디테일 비디오페이지에서 props로 받음\r\n        axios.post('/api/subscribe/subscribeNumber', subscribeNumberVariables) //서버로 요청하여 구독자 수를 가져오기\r\n            .then(response => {//서버에서 응답\r\n                if (response.data.success) { //응답 성공시\r\n                    setSubscribeNumber(response.data.subscribeNumber) //SubscribeNumber의 값이 구독자 수로 업데이트\r\n                } else { //응답 실패시\r\n                    alert('구독자 수 정보를 받아오지 못했습니다')\r\n                }\r\n            })\r\n\r\n        axios.post('/api/subscribe/subscribed', subscribeNumberVariables) //서버로 요청하여 구독여부 확인하기\r\n            .then(response => { //서버에서 응답\r\n                if (response.data.success) { //응답 성공시\r\n                    setSubscribed(response.data.subcribed) // Subscribed 값이 구독여부(true/false)에 따라 업데이트\r\n                } else { //응답 실패시\r\n                    alert('구독정보를 받아오지 못했습니다')\r\n                }\r\n            })\r\n\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <button \r\n            onClick={onSubscribe}\r\n            style={{\r\n                backgroundColor: `${Subscribed ? '#AAAAAA' : '#CC0000'}`, //구독을 하고있을때의 색:#AAAAAA 안하고있을때의 색:#CC0000\r\n                borderRadius: '4px', color: 'white',\r\n                padding: '10px 16px', fontWeight: '500', fontSize: '1rem', textTransform: 'uppercase'\r\n            }}>\r\n                {SubscribeNumber} {Subscribed ? 'Subscribed' : 'Subscribe'} {/* 구독을 하고있다면 Subscribed 안하고있다면 Subscribe*/}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Subscriber\r\n\r\n"]},"metadata":{},"sourceType":"module"}