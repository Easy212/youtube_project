{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\youtube_project\\\\client\\\\src\\\\components\\\\views\\\\UploadVideoPage\\\\UploadVideoPage.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Typography, Button, Form, message, Input, Icon } from 'antd';\nimport Dropzone from 'react-dropzone'; // 드래그 앤 드롭 파일 업로드를 쉽게 구현시킬 수 있는 리액트 라이브러리 \n\nimport axios from 'axios'; //서버에 요청를 주고받을때사용 하는 axios(ajax와 비슷한개념)\n\nimport { useSelector } from \"react-redux\"; //리덕스 훅\n\nconst {\n  Title\n} = Typography;\nconst {\n  TextArea\n} = Input;\nconst Private = [//map 메소드를 활용하여 키와 값으로 데이터 전달\n{\n  value: 0,\n  label: 'Private'\n}, {\n  value: 1,\n  label: 'Public'\n}];\nconst Catogory = [//map 메소드를 활용하여 키와 값으로 데이터 전달\n{\n  value: \"Film & Animation\",\n  label: \"Film & Animation\"\n}, {\n  value: \"Autos & Vehicles\",\n  label: \"Autos & Vehicles\"\n}, {\n  value: \"Music\",\n  label: \"Music\"\n}, {\n  value: \"Pets & Animals\",\n  label: \"Pets & Animals\"\n}, {\n  value: \"Sports\",\n  label: \"Sports\"\n}];\n\nfunction UploadVideoPage(props) {\n  const user = useSelector(state => state.user); // 리덕스훅 = state에서 user에 대한 모든 정보가 담김\n  //useState안에 value값을 저장하고 서버에 보낼때 모든 useState을 보내줌\n\n  const [title, setTitle] = useState(\"\"); //제목 value값\n\n  const [Description, setDescription] = useState(\"\"); //내용 value값\n\n  const [privacy, setPrivacy] = useState(0); //option value값 기본값은 0 = private / 1 = public\n\n  const [Categories, setCategories] = useState(\"Film & Animation\"); //카테고리 기본값 = Film & Animation\n\n  const [FilePath, setFilePath] = useState(\"\"); // 파일 경로\n\n  const [Duration, setDuration] = useState(\"\"); // 파일 러닝타임\n\n  const [Thumbnail, setThumbnail] = useState(\"\"); //썸네일\n\n  const handleChangeTitle = event => {\n    //onChange 함수\n    setTitle(event.currentTarget.value); //제목 입력한값을 셋팅\n  };\n\n  const handleChangeDecsription = event => {\n    setDescription(event.currentTarget.value);\n  };\n\n  const handleChangeOne = event => {\n    setPrivacy(event.currentTarget.value);\n  };\n\n  const handleChangeTwo = event => {\n    setCategories(event.currentTarget.value);\n  };\n\n  const onSubmit = event => {\n    //onSubmit 동작함수\n    event.preventDefault(); //이벤트 동작취소((페이지 새로고침)\n\n    if (user.userData && !user.userData.isAuth) {\n      return alert('로그인후 이용가능 합니다');\n    }\n\n    if (title === \"\" || Description === \"\" || Categories === \"\" || FilePath === \"\" || Duration === \"\" || Thumbnail === \"\") {\n      return alert('모든 필드를 입력해주세요');\n    }\n\n    const variables = {\n      writer: user.userData._id,\n      //작성자의 ID\n      title: title,\n      //제목\n      description: Description,\n      //내용\n      privacy: privacy,\n      //공개여부\n      filePath: FilePath,\n      //파일경로\n      category: Categories,\n      //동영상 종류\n      duration: Duration,\n      //러닝타임\n      thumbnail: Thumbnail //썸네일\n\n    };\n    axios.post('/api/video/uploadVideo', variables) //Axios를 사용하여 서버에 파일 정보 업로드 요청\n    .then(response => {\n      if (response.data.success) {\n        //응답 성공하면\n        alert('파일 업로드를 성공했습니다');\n        props.history.push('/'); //홈화면으로 이동\n      } else {\n        //응답 실패시하면\n        alert('파일 업로드를 실패했습니다');\n      }\n    });\n  };\n\n  const onDrop = files => {\n    //files 파라미터에는 업로드한 파일의 정보가 담겨있음\n    let formData = new FormData(); //FormData 생성(객체로 다양한 종류의 데이터를 HTTP 요청을 통해 서버로 보낼 때 사용)\n\n    const config = {\n      header: {\n        'content-type': 'multipart/form-data'\n      } // 헤더에 설정값을 넣지않으면 오류발생(http요청 헤더)\n\n    };\n    console.log(files);\n    formData.append(\"file\", files[0]); // files = 업로드한 파일의 정보가 있는배열 배열에서 첫 번째 파일 정보를 가져옵니다\n\n    axios.post('/api/video/uploadfiles', formData, config) //Axios를 사용하여 서버에 파일 업로드 요청\n    .then(response => {\n      if (response.data.success) {\n        //응답 성공시\n        let variable = {\n          filePath: response.data.filePath,\n          // url\n          fileName: response.data.fileName // 파일명\n\n        };\n        setFilePath(response.data.filePath);\n        axios.post('/api/video/thumbnail', variable) //파일 업로드 성공한후에 다시 Axios를 사용하여 서버에 보냄\n        .then(response => {\n          if (response.data.success) {\n            //응답 성공시\n            setDuration(response.data.fileDuration);\n            setThumbnail(response.data.thumbsFilePath);\n          } else {\n            //응답 실패시\n            alert('썸네일 생성에 실패했습니다');\n          }\n        });\n      } else {\n        //응답 실패시\n        alert('파일 업로드를 실패 했습니다');\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      maxWidth: '700px',\n      margin: '2rem auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginBottom: '2rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    level: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, \" \\uB3D9\\uC601\\uC0C1 \\uC5C5\\uB85C\\uB4DC\")), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-between'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Dropzone //파일 업로드 라이브러리\n  , {\n    onDrop: onDrop,\n    multiple: false //파일을 한번에 한개만 올릴건지 여러개 올린건지 false = 한개만 / true = 여러개\n    ,\n    maxSize: 800000000 //파일 사이즈\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }, ({\n    getRootProps,\n    getInputProps\n  }) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    style: {\n      width: '300px',\n      height: '240px',\n      border: '1px solid lightgray',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }\n  }, getRootProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Icon, {\n    type: \"plus\",\n    style: {\n      fontSize: '3rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 29\n    }\n  }))), Thumbnail !== \"\" &&\n  /*#__PURE__*/\n  //Thumbnail패스가 있을 경우만 아래 div랜더링\n  React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: `http://localhost:5000/${Thumbnail}`,\n    alt: \"Thumbnail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }, \"\\uC81C\\uBAA9\"), /*#__PURE__*/React.createElement(Input, {\n    onChange: handleChangeTitle,\n    value: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  }, \"\\uB0B4\\uC6A9\"), /*#__PURE__*/React.createElement(TextArea, {\n    onChange: handleChangeDecsription,\n    value: Description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: handleChangeOne,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }\n  }, Private.map((item, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: item.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 25\n    }\n  }, item.label))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: handleChangeTwo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }, Catogory.map((item, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: item.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 25\n    }\n  }, item.label))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    size: \"large\",\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }\n  }, \"\\uC800\\uC7A5\")));\n}\n\nexport default UploadVideoPage;","map":{"version":3,"sources":["C:/Users/user/Desktop/youtube_project/client/src/components/views/UploadVideoPage/UploadVideoPage.js"],"names":["React","useState","useEffect","Typography","Button","Form","message","Input","Icon","Dropzone","axios","useSelector","Title","TextArea","Private","value","label","Catogory","UploadVideoPage","props","user","state","title","setTitle","Description","setDescription","privacy","setPrivacy","Categories","setCategories","FilePath","setFilePath","Duration","setDuration","Thumbnail","setThumbnail","handleChangeTitle","event","currentTarget","handleChangeDecsription","handleChangeOne","handleChangeTwo","onSubmit","preventDefault","userData","isAuth","alert","variables","writer","_id","description","filePath","category","duration","thumbnail","post","then","response","data","success","history","push","onDrop","files","formData","FormData","config","header","console","log","append","variable","fileName","fileDuration","thumbsFilePath","maxWidth","margin","textAlign","marginBottom","display","justifyContent","getRootProps","getInputProps","width","height","border","alignItems","fontSize","map","item","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,IAA7B,EAAmCC,OAAnC,EAA4CC,KAA5C,EAAmDC,IAAnD,QAA+D,MAA/D;AACA,OAAOC,QAAP,MAAqB,gBAArB,C,CAAuC;;AACvC,OAAOC,KAAP,MAAkB,OAAlB,C,CAA2B;;AAC3B,SAASC,WAAT,QAA4B,aAA5B,C,CAA2C;;AAE3C,MAAM;AAAEC,EAAAA;AAAF,IAAYT,UAAlB;AACA,MAAM;AAAEU,EAAAA;AAAF,IAAeN,KAArB;AAEA,MAAMO,OAAO,GAAG,CAAE;AACd;AAAEC,EAAAA,KAAK,EAAE,CAAT;AAAYC,EAAAA,KAAK,EAAE;AAAnB,CADY,EAEZ;AAAED,EAAAA,KAAK,EAAE,CAAT;AAAYC,EAAAA,KAAK,EAAE;AAAnB,CAFY,CAAhB;AAKA,MAAMC,QAAQ,GAAG,CAAE;AACf;AAAEF,EAAAA,KAAK,EAAE,kBAAT;AAA6BC,EAAAA,KAAK,EAAE;AAApC,CADa,EAEb;AAAED,EAAAA,KAAK,EAAE,kBAAT;AAA6BC,EAAAA,KAAK,EAAE;AAApC,CAFa,EAGb;AAAED,EAAAA,KAAK,EAAE,OAAT;AAAkBC,EAAAA,KAAK,EAAE;AAAzB,CAHa,EAIb;AAAED,EAAAA,KAAK,EAAE,gBAAT;AAA4BC,EAAAA,KAAK,EAAE;AAAnC,CAJa,EAKb;AAAED,EAAAA,KAAK,EAAE,QAAT;AAAmBC,EAAAA,KAAK,EAAE;AAA1B,CALa,CAAjB;;AAQA,SAASE,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,QAAMC,IAAI,GAAGT,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACD,IAAhB,CAAxB,CAD4B,CACoB;AAEhD;;AACA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC,EAAD,CAAlC,CAJ4B,CAIY;;AACxC,QAAM,CAACuB,WAAD,EAAcC,cAAd,IAAgCxB,QAAQ,CAAC,EAAD,CAA9C,CAL4B,CAKwB;;AACpD,QAAM,CAACyB,OAAD,EAAUC,UAAV,IAAwB1B,QAAQ,CAAC,CAAD,CAAtC,CAN4B,CAMc;;AAC1C,QAAM,CAAC2B,UAAD,EAAaC,aAAb,IAA8B5B,QAAQ,CAAC,kBAAD,CAA5C,CAP4B,CAOqC;;AACjE,QAAM,CAAC6B,QAAD,EAAWC,WAAX,IAA0B9B,QAAQ,CAAC,EAAD,CAAxC,CAR4B,CAQiB;;AAC7C,QAAM,CAAC+B,QAAD,EAAWC,WAAX,IAA0BhC,QAAQ,CAAC,EAAD,CAAxC,CAT4B,CASiB;;AAC7C,QAAM,CAACiC,SAAD,EAAYC,YAAZ,IAA4BlC,QAAQ,CAAC,EAAD,CAA1C,CAV4B,CAUmB;;AAG/C,QAAMmC,iBAAiB,GAAIC,KAAD,IAAW;AAAE;AACnCd,IAAAA,QAAQ,CAACc,KAAK,CAACC,aAAN,CAAoBvB,KAArB,CAAR,CADiC,CACG;AACvC,GAFD;;AAIA,QAAMwB,uBAAuB,GAAIF,KAAD,IAAW;AACvCZ,IAAAA,cAAc,CAACY,KAAK,CAACC,aAAN,CAAoBvB,KAArB,CAAd;AACH,GAFD;;AAIA,QAAMyB,eAAe,GAAIH,KAAD,IAAW;AAC/BV,IAAAA,UAAU,CAACU,KAAK,CAACC,aAAN,CAAoBvB,KAArB,CAAV;AACH,GAFD;;AAIA,QAAM0B,eAAe,GAAIJ,KAAD,IAAW;AAC/BR,IAAAA,aAAa,CAACQ,KAAK,CAACC,aAAN,CAAoBvB,KAArB,CAAb;AACH,GAFD;;AAIA,QAAM2B,QAAQ,GAAIL,KAAD,IAAW;AAAE;AAE1BA,IAAAA,KAAK,CAACM,cAAN,GAFwB,CAEA;;AAExB,QAAIvB,IAAI,CAACwB,QAAL,IAAiB,CAACxB,IAAI,CAACwB,QAAL,CAAcC,MAApC,EAA4C;AACxC,aAAOC,KAAK,CAAC,eAAD,CAAZ;AACH;;AAED,QAAIxB,KAAK,KAAK,EAAV,IAAgBE,WAAW,KAAK,EAAhC,IACAI,UAAU,KAAK,EADf,IACqBE,QAAQ,KAAK,EADlC,IAEAE,QAAQ,KAAK,EAFb,IAEmBE,SAAS,KAAK,EAFrC,EAEyC;AACrC,aAAOY,KAAK,CAAC,eAAD,CAAZ;AACH;;AAED,UAAMC,SAAS,GAAG;AACdC,MAAAA,MAAM,EAAE5B,IAAI,CAACwB,QAAL,CAAcK,GADR;AACa;AAC3B3B,MAAAA,KAAK,EAAEA,KAFO;AAEA;AACd4B,MAAAA,WAAW,EAAE1B,WAHC;AAGY;AAC1BE,MAAAA,OAAO,EAAEA,OAJK;AAII;AAClByB,MAAAA,QAAQ,EAAErB,QALI;AAKM;AACpBsB,MAAAA,QAAQ,EAAExB,UANI;AAMQ;AACtByB,MAAAA,QAAQ,EAAErB,QAPI;AAOM;AACpBsB,MAAAA,SAAS,EAAEpB,SARG,CAQO;;AARP,KAAlB;AAWAxB,IAAAA,KAAK,CAAC6C,IAAN,CAAW,wBAAX,EAAqCR,SAArC,EAAgD;AAAhD,KACKS,IADL,CACUC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AAAC;AACxBb,QAAAA,KAAK,CAAC,gBAAD,CAAL;AACA3B,QAAAA,KAAK,CAACyC,OAAN,CAAcC,IAAd,CAAmB,GAAnB,EAFuB,CAEC;AAC3B,OAHD,MAGO;AAAE;AACLf,QAAAA,KAAK,CAAC,gBAAD,CAAL;AACH;AACJ,KARL;AAUH,GAnCD;;AAqCA,QAAMgB,MAAM,GAAIC,KAAD,IAAW;AAAE;AAExB,QAAIC,QAAQ,GAAG,IAAIC,QAAJ,EAAf,CAFsB,CAES;;AAC/B,UAAMC,MAAM,GAAG;AACXC,MAAAA,MAAM,EAAE;AAAE,wBAAgB;AAAlB,OADG,CACuC;;AADvC,KAAf;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACAC,IAAAA,QAAQ,CAACM,MAAT,CAAgB,MAAhB,EAAwBP,KAAK,CAAC,CAAD,CAA7B,EAPsB,CAOY;;AAElCrD,IAAAA,KAAK,CAAC6C,IAAN,CAAW,wBAAX,EAAqCS,QAArC,EAA+CE,MAA/C,EAAuD;AAAvD,KACKV,IADL,CACUC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AAAE;AAEzB,YAAIY,QAAQ,GAAG;AACXpB,UAAAA,QAAQ,EAAEM,QAAQ,CAACC,IAAT,CAAcP,QADb;AACuB;AAClCqB,UAAAA,QAAQ,EAAEf,QAAQ,CAACC,IAAT,CAAcc,QAFb,CAEsB;;AAFtB,SAAf;AAIAzC,QAAAA,WAAW,CAAC0B,QAAQ,CAACC,IAAT,CAAcP,QAAf,CAAX;AAEAzC,QAAAA,KAAK,CAAC6C,IAAN,CAAW,sBAAX,EAAmCgB,QAAnC,EAA6C;AAA7C,SACCf,IADD,CACMC,QAAQ,IAAI;AACd,cAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AAAG;AAC1B1B,YAAAA,WAAW,CAACwB,QAAQ,CAACC,IAAT,CAAce,YAAf,CAAX;AACAtC,YAAAA,YAAY,CAACsB,QAAQ,CAACC,IAAT,CAAcgB,cAAf,CAAZ;AACH,WAHD,MAGO;AAAE;AACL5B,YAAAA,KAAK,CAAC,gBAAD,CAAL;AACH;AACJ,SARD;AAWH,OAnBD,MAmBO;AAAE;AACLA,QAAAA,KAAK,CAAC,iBAAD,CAAL;AACH;AACJ,KAxBL;AA0BH,GAnCD;;AAqCA,sBACI;AAAK,IAAA,KAAK,EAAE;AAAE6B,MAAAA,QAAQ,EAAE,OAAZ;AAAqBC,MAAAA,MAAM,EAAE;AAA7B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE,QAAb;AAAuBC,MAAAA,YAAY,EAAE;AAArC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CADJ,CADJ,eAKI,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEpC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,KAAK,EAAE;AAAEqC,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,cAAc,EAAE;AAAnC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,QAAD,CAAU;AAAV;AACA,IAAA,MAAM,EAAElB,MADR;AAEA,IAAA,QAAQ,EAAE,KAFV,CAEiB;AAFjB;AAGA,IAAA,OAAO,EAAE,SAHT,CAGoB;AAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOC,CAAC;AAAEmB,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAD,kBACG;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE,OAAT;AAAkBC,MAAAA,MAAM,EAAE,OAA1B;AAAmCC,MAAAA,MAAM,EAAE,qBAA3C;AAAkEN,MAAAA,OAAO,EAAE,MAA3E;AACZO,MAAAA,UAAU,EAAE,QADA;AACUN,MAAAA,cAAc,EAAE;AAD1B;AAAZ,KACsDC,YAAY,EADlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEI,+CAAWC,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,eAGI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,MAAX;AAAkB,IAAA,KAAK,EAAE;AAAEK,MAAAA,QAAQ,EAAE;AAAZ,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CARJ,CAFJ,EAkBKrD,SAAS,KAAK,EAAd;AAAA;AAAoB;AACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,GAAG,EAAG,yBAAwBA,SAAU,EAA7C;AAAgD,IAAA,GAAG,EAAC,WAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAnBR,CADJ,eA0BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BJ,eA0BU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BV,eA2BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA3BJ,eA4BI,oBAAC,KAAD;AACI,IAAA,QAAQ,EAAEE,iBADd;AAEI,IAAA,KAAK,EAAEd,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5BJ,eAgCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhCJ,eAgCU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhCV,eAiCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAjCJ,eAkCI,oBAAC,QAAD;AACI,IAAA,QAAQ,EAAEiB,uBADd;AAEI,IAAA,KAAK,EAAEf,WAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlCJ,eAsCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtCJ,eAsCU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtCV,eAwCI;AAAQ,IAAA,QAAQ,EAAEgB,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK1B,OAAO,CAAC0E,GAAR,CAAY,CAACC,IAAD,EAAOC,KAAP,kBACT;AAAQ,IAAA,GAAG,EAAEA,KAAb;AAAoB,IAAA,KAAK,EAAED,IAAI,CAAC1E,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwC0E,IAAI,CAACzE,KAA7C,CADH,CADL,CAxCJ,eA6CI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7CJ,eA6CU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7CV,eA+CI;AAAQ,IAAA,QAAQ,EAAEyB,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKxB,QAAQ,CAACuE,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,kBACV;AAAQ,IAAA,GAAG,EAAEA,KAAb;AAAoB,IAAA,KAAK,EAAED,IAAI,CAACzE,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwCyE,IAAI,CAACzE,KAA7C,CADH,CADL,CA/CJ,eAoDI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApDJ,eAoDU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApDV,eAsDI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,IAAI,EAAC,OAA5B;AAAoC,IAAA,OAAO,EAAE0B,QAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAtDJ,CALJ,CADJ;AAmEH;;AAED,eAAexB,eAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Typography, Button, Form, message, Input, Icon } from 'antd';\r\nimport Dropzone from 'react-dropzone'; // 드래그 앤 드롭 파일 업로드를 쉽게 구현시킬 수 있는 리액트 라이브러리 \r\nimport axios from 'axios'; //서버에 요청를 주고받을때사용 하는 axios(ajax와 비슷한개념)\r\nimport { useSelector } from \"react-redux\"; //리덕스 훅\r\n\r\nconst { Title } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nconst Private = [ //map 메소드를 활용하여 키와 값으로 데이터 전달\r\n    { value: 0, label: 'Private' },\r\n    { value: 1, label: 'Public' }\r\n]\r\n\r\nconst Catogory = [ //map 메소드를 활용하여 키와 값으로 데이터 전달\r\n    { value: \"Film & Animation\", label: \"Film & Animation\" },\r\n    { value: \"Autos & Vehicles\", label: \"Autos & Vehicles\" },\r\n    { value: \"Music\", label: \"Music\" },\r\n    { value: \"Pets & Animals\" , label: \"Pets & Animals\" },\r\n    { value: \"Sports\", label: \"Sports\" },\r\n]\r\n\r\nfunction UploadVideoPage(props) {\r\n    const user = useSelector(state => state.user);  // 리덕스훅 = state에서 user에 대한 모든 정보가 담김\r\n\r\n    //useState안에 value값을 저장하고 서버에 보낼때 모든 useState을 보내줌\r\n    const [title, setTitle] = useState(\"\"); //제목 value값\r\n    const [Description, setDescription] = useState(\"\"); //내용 value값\r\n    const [privacy, setPrivacy] = useState(0) //option value값 기본값은 0 = private / 1 = public\r\n    const [Categories, setCategories] = useState(\"Film & Animation\") //카테고리 기본값 = Film & Animation\r\n    const [FilePath, setFilePath] = useState(\"\") // 파일 경로\r\n    const [Duration, setDuration] = useState(\"\") // 파일 러닝타임\r\n    const [Thumbnail, setThumbnail] = useState(\"\") //썸네일\r\n\r\n\r\n    const handleChangeTitle = (event) => { //onChange 함수\r\n        setTitle(event.currentTarget.value) //제목 입력한값을 셋팅\r\n    }\r\n\r\n    const handleChangeDecsription = (event) => {\r\n        setDescription(event.currentTarget.value)\r\n    }\r\n\r\n    const handleChangeOne = (event) => {\r\n        setPrivacy(event.currentTarget.value)\r\n    }\r\n\r\n    const handleChangeTwo = (event) => {\r\n        setCategories(event.currentTarget.value)\r\n    }\r\n\r\n    const onSubmit = (event) => { //onSubmit 동작함수\r\n\r\n        event.preventDefault(); //이벤트 동작취소((페이지 새로고침)\r\n\r\n        if (user.userData && !user.userData.isAuth) {\r\n            return alert('로그인후 이용가능 합니다')\r\n        }\r\n\r\n        if (title === \"\" || Description === \"\" ||\r\n            Categories === \"\" || FilePath === \"\" ||\r\n            Duration === \"\" || Thumbnail === \"\") {\r\n            return alert('모든 필드를 입력해주세요')\r\n        }\r\n\r\n        const variables = { \r\n            writer: user.userData._id, //작성자의 ID\r\n            title: title, //제목\r\n            description: Description, //내용\r\n            privacy: privacy, //공개여부\r\n            filePath: FilePath, //파일경로\r\n            category: Categories, //동영상 종류\r\n            duration: Duration, //러닝타임\r\n            thumbnail: Thumbnail //썸네일\r\n        }\r\n\r\n        axios.post('/api/video/uploadVideo', variables) //Axios를 사용하여 서버에 파일 정보 업로드 요청\r\n            .then(response => {\r\n                if (response.data.success) {//응답 성공하면\r\n                    alert('파일 업로드를 성공했습니다')\r\n                    props.history.push('/') //홈화면으로 이동\r\n                } else { //응답 실패시하면\r\n                    alert('파일 업로드를 실패했습니다')\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    const onDrop = (files) => { //files 파라미터에는 업로드한 파일의 정보가 담겨있음\r\n        \r\n        let formData = new FormData(); //FormData 생성(객체로 다양한 종류의 데이터를 HTTP 요청을 통해 서버로 보낼 때 사용)\r\n        const config = {\r\n            header: { 'content-type': 'multipart/form-data' } // 헤더에 설정값을 넣지않으면 오류발생(http요청 헤더)\r\n        }\r\n        console.log(files)\r\n        formData.append(\"file\", files[0]) // files = 업로드한 파일의 정보가 있는배열 배열에서 첫 번째 파일 정보를 가져옵니다\r\n\r\n        axios.post('/api/video/uploadfiles', formData, config) //Axios를 사용하여 서버에 파일 업로드 요청\r\n            .then(response => {\r\n                if (response.data.success) { //응답 성공시\r\n\r\n                    let variable = {\r\n                        filePath: response.data.filePath, // url\r\n                        fileName: response.data.fileName // 파일명\r\n                    }\r\n                    setFilePath(response.data.filePath)\r\n\r\n                    axios.post('/api/video/thumbnail', variable) //파일 업로드 성공한후에 다시 Axios를 사용하여 서버에 보냄\r\n                    .then(response => {\r\n                        if (response.data.success) {  //응답 성공시\r\n                            setDuration(response.data.fileDuration)\r\n                            setThumbnail(response.data.thumbsFilePath)\r\n                        } else { //응답 실패시\r\n                            alert('썸네일 생성에 실패했습니다'); \r\n                        }\r\n                    })\r\n\r\n\r\n                } else { //응답 실패시\r\n                    alert('파일 업로드를 실패 했습니다')\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    return (\r\n        <div style={{ maxWidth: '700px', margin: '2rem auto' }}>\r\n            <div style={{ textAlign: 'center', marginBottom: '2rem' }}>\r\n                <Title level={2} > 동영상 업로드</Title>\r\n            </div>\r\n\r\n            <Form onSubmit={onSubmit}>\r\n                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                    \r\n                    <Dropzone //파일 업로드 라이브러리\r\n                    onDrop={onDrop}\r\n                    multiple={false} //파일을 한번에 한개만 올릴건지 여러개 올린건지 false = 한개만 / true = 여러개\r\n                    maxSize={800000000} //파일 사이즈\r\n                    > \r\n                    {/* getRootProps = dropzone의 전체 영역을 나타내는 div의 props를 반환 */}\r\n                    {/* getInputProps = 실제 파일 업로드를 위한 input의 props를 반환 */}\r\n                    {({ getRootProps, getInputProps }) => (\r\n                        <div style={{ width: '300px', height: '240px', border: '1px solid lightgray', display: 'flex', \r\n                        alignItems: 'center', justifyContent: 'center' }} {...getRootProps()}>\r\n                            <input {...getInputProps()} />\r\n                            <Icon type=\"plus\" style={{ fontSize: '3rem' }} />\r\n                        </div>\r\n                        )}\r\n                    </Dropzone> \r\n\r\n                    {Thumbnail !== \"\" && //Thumbnail패스가 있을 경우만 아래 div랜더링\r\n                        <div>\r\n                            <img src={`http://localhost:5000/${Thumbnail}`} alt=\"Thumbnail\" />\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n                <br /><br />\r\n                <label>제목</label>\r\n                <Input\r\n                    onChange={handleChangeTitle}\r\n                    value={title}\r\n                />\r\n                <br /><br />\r\n                <label>내용</label>\r\n                <TextArea\r\n                    onChange={handleChangeDecsription}\r\n                    value={Description}\r\n                />\r\n                <br /><br />\r\n\r\n                <select onChange={handleChangeOne}>\r\n                    {Private.map((item, index) => (\r\n                        <option key={index} value={item.value}>{item.label}</option>\r\n                    ))}\r\n                </select>\r\n                <br /><br />\r\n\r\n                <select onChange={handleChangeTwo}>\r\n                    {Catogory.map((item, index) => (\r\n                        <option key={index} value={item.label}>{item.label}</option>\r\n                    ))}\r\n                </select>\r\n                <br /><br />\r\n\r\n                <Button type=\"primary\" size=\"large\" onClick={onSubmit}>\r\n                    저장\r\n                </Button>\r\n\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UploadVideoPage\r\n"]},"metadata":{},"sourceType":"module"}