{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\youtube_project\\\\client\\\\src\\\\components\\\\views\\\\RegisterPage\\\\RegisterPage.js\";\nimport React from \"react\";\nimport moment from \"moment\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { registerUser } from \"../../../_actions/user_actions\";\nimport { useDispatch } from \"react-redux\";\nimport { Form, Input, Button } from 'antd';\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 8\n    }\n  }\n};\n\nfunction RegisterPage(props) {\n  const dispatch = useDispatch();\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      email: '',\n      name: '',\n      password: '',\n      confirmPassword: ''\n    },\n    validationSchema: Yup.object().shape({\n      name: Yup.string().required('이름입력은 필수입니다.'),\n      email: Yup.string().email('이메일 주소 형식이 맞지않습니다.').required('이메일 입력은 필수입니다.'),\n      password: Yup.string().min(6, '비밀번호는 6자 이상이어야 합니다.').required('비밀번호 입력은 필수입니다'),\n      confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], '비밀번호가 일치 하지 않습니다').required('비밀번호 확인은 필수입니다.')\n    }),\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      setTimeout(() => {\n        let dataToSubmit = {\n          email: values.email,\n          password: values.password,\n          name: values.name,\n          image: `http://gravatar.com/avatar/${moment().unix()}?d=identicon`\n        };\n        dispatch(registerUser(dataToSubmit)).then(response => {\n          if (response.payload.success) {\n            props.history.push(\"/login\");\n          } else {\n            alert(response.payload.err.errmsg);\n          }\n        });\n        setSubmitting(false);\n      }, 500);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, props => {\n    const {\n      values,\n      touched,\n      errors,\n      dirty,\n      isSubmitting,\n      handleChange,\n      handleBlur,\n      handleSubmit,\n      handleReset\n    } = props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, \"\\uD68C\\uC6D0\\uAC00\\uC785\"), /*#__PURE__*/React.createElement(Form, Object.assign({\n      style: {\n        minWidth: '375px'\n      }\n    }, formItemLayout, {\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Form.Item, {\n      required: true,\n      label: \"\\uC774\\uB984\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      id: \"name\",\n      placeholder: \"\\uC774\\uB984\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n      type: \"text\",\n      value: values.name,\n      onChange: handleChange //입력 필드의 값이 변경될 때마다 실행\n      ,\n      onBlur: handleBlur //입력 필드가 포커스를 잃을 때 실행\n      ,\n      className: //입력 필드의 CSS 클래스를 지정\n      //errors.name과 touched.name 중 하나라도 false 인경우 \n      //즉 해당 입력 필드에 대한 유효성 검사 오류보정가 없거나\n      //이 필드에 대해 사용자가 아직 터치하지 않았을 경우 'text-input' 클래스를 반환\n      errors.name && touched.name ? 'text-input error' : 'text-input' //유효성 검사 결과에 따라 동적으로 결정\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }), errors.name && touched.name && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 19\n      }\n    }, errors.name)), /*#__PURE__*/React.createElement(Form.Item, {\n      required: true,\n      label: \"Email\",\n      hasFeedback: true,\n      validateStatus: errors.email && touched.email ? \"error\" : 'success',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      id: \"email\",\n      placeholder: \"\\uC774\\uBA54\\uC77C\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n      type: \"email\",\n      value: values.email,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.email && touched.email ? 'text-input error' : 'text-input',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }), errors.email && touched.email && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 19\n      }\n    }, errors.email)), /*#__PURE__*/React.createElement(Form.Item, {\n      required: true,\n      label: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n      hasFeedback: true,\n      validateStatus: errors.password && touched.password ? \"error\" : 'success',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      id: \"password\",\n      placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n      type: \"password\",\n      value: values.password,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.password && touched.password ? 'text-input error' : 'text-input',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    }), errors.password && touched.password && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 19\n      }\n    }, errors.password)), /*#__PURE__*/React.createElement(Form.Item, {\n      required: true,\n      label: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",\n      hasFeedback: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      id: \"confirmPassword\",\n      placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uB2E4\\uC2DC\\uD55C\\uBC88 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n      type: \"password\",\n      value: values.confirmPassword,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.confirmPassword && touched.confirmPassword ? 'text-input error' : 'text-input',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    }), errors.confirmPassword && touched.confirmPassword && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 19\n      }\n    }, errors.confirmPassword)), /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: handleSubmit,\n      type: \"primary\",\n      disabled: isSubmitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }\n    }, \"\\uD68C\\uC6D0\\uAC00\\uC785\"))));\n  });\n}\n\n;\nexport default RegisterPage;","map":{"version":3,"sources":["C:/Users/user/Desktop/youtube_project/client/src/components/views/RegisterPage/RegisterPage.js"],"names":["React","moment","Formik","Yup","registerUser","useDispatch","Form","Input","Button","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","RegisterPage","props","dispatch","email","name","password","confirmPassword","object","shape","string","required","min","oneOf","ref","values","setSubmitting","setTimeout","dataToSubmit","image","unix","then","response","payload","success","history","push","alert","err","errmsg","touched","errors","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","minWidth"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport moment from \"moment\";\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { registerUser } from \"../../../_actions/user_actions\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n} from 'antd';\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 8 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 16 },\r\n  },\r\n};\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n      offset: 8,\r\n    },\r\n  },\r\n};\r\n\r\nfunction RegisterPage(props) {\r\n  const dispatch = useDispatch();\r\n  return (\r\n\r\n    <Formik\r\n      initialValues={{\r\n        email: '',\r\n        name: '',\r\n        password: '',\r\n        confirmPassword: ''\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        name: Yup.string()\r\n          .required('이름입력은 필수입니다.'),\r\n        email: Yup.string()\r\n          .email('이메일 주소 형식이 맞지않습니다.')\r\n          .required('이메일 입력은 필수입니다.'),\r\n        password: Yup.string()\r\n          .min(6, '비밀번호는 6자 이상이어야 합니다.')\r\n          .required('비밀번호 입력은 필수입니다'),\r\n        confirmPassword: Yup.string()\r\n          .oneOf([Yup.ref('password'), null], '비밀번호가 일치 하지 않습니다')\r\n          .required('비밀번호 확인은 필수입니다.')\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n\r\n          let dataToSubmit = {\r\n            email: values.email,\r\n            password: values.password,\r\n            name: values.name,\r\n            image: `http://gravatar.com/avatar/${moment().unix()}?d=identicon`\r\n          };\r\n\r\n          dispatch(registerUser(dataToSubmit)).then(response => {\r\n            if (response.payload.success) {\r\n              props.history.push(\"/login\");\r\n            } else {\r\n              alert(response.payload.err.errmsg)\r\n            }\r\n          })\r\n\r\n          setSubmitting(false);\r\n        }, 500);\r\n      }}\r\n    >\r\n      {props => {\r\n        const {\r\n          values,\r\n          touched,\r\n          errors,\r\n          dirty,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          handleReset,\r\n        } = props;\r\n        return (\r\n          <div className=\"app\">\r\n            <h2>회원가입</h2>\r\n            <Form style={{ minWidth: '375px' }} {...formItemLayout} onSubmit={handleSubmit} >\r\n\r\n              <Form.Item required label=\"이름\">\r\n                <Input\r\n                  id=\"name\"\r\n                  placeholder=\"이름을 입력해주세요\"\r\n                  type=\"text\"\r\n                  value={values.name}\r\n                  onChange={handleChange} //입력 필드의 값이 변경될 때마다 실행\r\n                  onBlur={handleBlur} //입력 필드가 포커스를 잃을 때 실행\r\n                  className={ //입력 필드의 CSS 클래스를 지정\r\n                    //errors.name과 touched.name 중 하나라도 false 인경우 \r\n                    //즉 해당 입력 필드에 대한 유효성 검사 오류보정가 없거나\r\n                    //이 필드에 대해 사용자가 아직 터치하지 않았을 경우 'text-input' 클래스를 반환\r\n                    errors.name && touched.name ? 'text-input error' : 'text-input' //유효성 검사 결과에 따라 동적으로 결정\r\n                  }\r\n                />\r\n                {errors.name && touched.name && (\r\n                  <div className=\"input-feedback\">{errors.name}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item required label=\"Email\" hasFeedback validateStatus={errors.email && touched.email ? \"error\" : 'success'}>\r\n                <Input\r\n                  id=\"email\"\r\n                  placeholder=\"이메일을 입력해주세요\"\r\n                  type=\"email\"\r\n                  value={values.email}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.email && touched.email ? 'text-input error' : 'text-input'\r\n                  }\r\n                />\r\n                {errors.email && touched.email && (\r\n                  <div className=\"input-feedback\">{errors.email}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item required label=\"비밀번호\" hasFeedback validateStatus={errors.password && touched.password ? \"error\" : 'success'}>\r\n                <Input\r\n                  id=\"password\"\r\n                  placeholder=\"비밀번호를 입력해주세요\"\r\n                  type=\"password\"\r\n                  value={values.password}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.password && touched.password ? 'text-input error' : 'text-input'\r\n                  }\r\n                />\r\n                {errors.password && touched.password && (\r\n                  <div className=\"input-feedback\">{errors.password}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item required label=\"비밀번호 확인\" hasFeedback>\r\n                <Input\r\n                  id=\"confirmPassword\"\r\n                  placeholder=\"비밀번호를 다시한번 입력해주세요\"\r\n                  type=\"password\"\r\n                  value={values.confirmPassword}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.confirmPassword && touched.confirmPassword ? 'text-input error' : 'text-input'\r\n                  }\r\n                />\r\n                {errors.confirmPassword && touched.confirmPassword && (\r\n                  <div className=\"input-feedback\">{errors.confirmPassword}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item {...tailFormItemLayout}>\r\n                <Button onClick={handleSubmit} type=\"primary\" disabled={isSubmitting}>\r\n                  회원가입\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\n\r\nexport default RegisterPage\r\n"]},"metadata":{},"sourceType":"module"}